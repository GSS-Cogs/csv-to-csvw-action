name: csv-to-csvw action
description: Generate CSV-W from csv upload to repository.
author: Connected Open Government Statistics (COGS)
branding:
  icon: box
  color: white
on:
  push:
    branches:
      - main
jobs:
  generate_csvw_from_csv_upload:
    name: Generate CSV-W from csv upload
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install csvcubed
        run: pip install csvcubed

      - name: Verify csvcubed installation
        run: csvcubed version

      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: View working directory
        run: ls -la $GITHUB_WORKSPACE

      - name: Configure git
        run: |
          git config --global user.name "CSV-W from csv upload generator"
          git pull

      - name: Get all added/changed/removed files
        id: get-added-changed-removed-files
        uses: jitterbit/get-changed-files@v1
        with:
          format: "csv"

      - name: Build and inspect new files
        id: build-and-inspect-inputs
        run: |
          input_files=${{steps.get-added-changed-removed-files.outputs.added_modified}}
          bash scripts/build_and_inspect_inputs.sh $input_files

      - name: Process all deleted files
        id: process-deleted-files
        run: |
          deleted_files=${{steps.get-added-changed-removed-files.outputs.removed}}
          bash scripts/handle_deleted_files.sh $deleted_files

      - name: Commit generated CSV-Ws and logs to the repository
        if: ${{ fromJSON(steps.build-and-inspect-inputs.outputs.has_outputs) == true }}
        run: |
          echo $'\nCommitting CSV-Ws\n'
          git add out/
          git commit -m "CSV-Ws generated from csv upload - $(date +'%d-%m-%Y at %H:%M:%S')"
          git push

      - name: Publish CSV-Ws and logs to artefacts
        if: ${{ fromJSON(steps.build-and-inspect-inputs.outputs.has_outputs) == true }}
        uses: actions/upload-artifact@v2
        with:
          name: assets-for-download
          path: out

      - name: Publish CSV-Ws and logs to GitHub Pages
        if: ${{ fromJSON(steps.build-and-inspect-inputs.outputs.has_outputs) == true }}
        run: |
          echo "Publishing to GitHub Pages"
          git checkout -b gh-pages
          rm -r LICENSE
          rm -r README.md

          repo_name=${GITHUB_REPOSITORY#*/}    
          username=${GITHUB_REPOSITORY_OWNER}
          commit_id=${GITHUB_SHA}      
          mapfile -d ',' -t out_files < <(printf '%s,' $(find . -type f -path '*out/*'))
          processed_out_files=$(printf ",%s" "${out_files[@]}")

          bash scripts/generate_git_pages_html.sh $repo_name $username $commit_id $processed_out_files

          git add .nojekyll
          git add index.html
          git commit -a -m "Updating outputs in GitHub Pages - $(date +'%d-%m-%Y at %H:%M:%S')"
          git push --set-upstream origin gh-pages -f

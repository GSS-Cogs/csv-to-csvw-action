"""
Functionality for generating and inspecting CSV-Ws for the input files.
"""

echo "::set-output name=has_outputs::false"

echo "Input argument: $1"
IFS=', ' read -r -a added_modified_files <<< "$1"
echo "added_modified_files: ${added_modified_files[@]}"

for file in "${added_modified_files[@]}"; do
  echo "${file}"
  file_path="${file%.*}"
  file_name="${file_path##*/}"
  file_extension="${file##*.}"
  out_path="out/${file_path}/"
  
  # Detects the top folder from the file path. E.g. out/ is the top folder when the path is out/sub-folder/my-data.csv
  top_folder=$(echo "$file_path" | cut -d "/" -f1)

  echo "file_path: ${file_path}"
  echo "file_name: ${file_name}"
  echo "file_extension: ${file_extension}"
  echo "out_path: ${out_path}"
  echo "top_folder: ${top_folder}"

  # The out/ folder is used for storing the outputs generated by csvcubed build and inspect commands. Hence, the user should not use this folder to commit any inputs. Any inputs committed to this folder will not be procssed.
  if [[ ($file_extension == "csv" || $file_extension == "json") && $top_folder != "out" ]]; then
    echo $'\n'
    echo "Processing file ${file}"
    echo "Output path is ${out_path}"

    csv_file=""
    config_file=""
    if [[ $file_extension == "csv" ]]; then
      csv_file=${file}
      for file_secondary in "${added_modified_files[@]}"; do
        file_secondary_name="${file_secondary%.*}"
        file_secondary_extension="${file_secondary##*.}"
        if [[ "${file_secondary_name}.${file_secondary_extension}" == "${file_path}.json" ]]; then
          config_file="${file_secondary_name}.json"
        fi
      done
    elif [[ $file_extension == "json" ]]; then
      config_file=${file}
      if [[ -f "${file_path}/${file_name}.csv" ]]; then
        csv_file="${file_path}/${file_name}.csv"
      else
        config_file=NULL
      fi
    fi
    
    echo "csv_file for processing: ${csv_file}"
    
    if [[ -f $csv_file ]]; then
      if [[ -f $config_file ]]; then
        echo "Config for ${csv_file} is available: ${config_file}"
        echo "Building CSV-W"
        csvcubed build $csv_file -c $config_file --out $out_path --validation-errors-to-file
      else
        echo "Config for ${csv_file} is not available"
        echo "Building CSV-W"
        csvcubed build $csv_file --out $out_path --validation-errors-to-file
      fi
      
      echo "Inspecting CSV-W"
      mapfile -d $'\0' inspectable_files < <(find "${GITHUB_WORKSPACE}/${out_path}" -name "*.csv-metadata.json" -type f -print0)
     
      for file in "${inspectable_files[@]}"; do
        echo "Inspecting file ${file}"
        file_path="${file%.*}"
        file_name="${file_path##*/}"
        inspect_output_file="${out_path}${file_name}_inspect_output.txt"

        csvcubed inspect $file > $inspect_output_file
      done
      echo "::set-output name=has_outputs::true"
    fi
  fi
done